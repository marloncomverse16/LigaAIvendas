/**
 * Sistema de monitoramento autom√°tico de conex√µes QR Code
 * Verifica periodicamente o status de conex√£o e dispara webhooks quando detecta mudan√ßas
 */

import axios from 'axios';
import { storage } from '../storage';
import { sendQRConnectionWebhook, sendQRDisconnectionWebhook } from './qr-connection-webhook';

// Cache para armazenar o √∫ltimo estado de conex√£o de cada usu√°rio
const lastConnectionState: Record<number, boolean> = {};

// Fun√ß√£o para verificar status de conex√£o de um usu√°rio espec√≠fico
async function checkUserConnectionStatus(userId: number): Promise<boolean | null> {
  try {
    const user = await storage.getUser(userId);
    if (!user) {
      console.log(`‚ö†Ô∏è Usu√°rio ${userId} n√£o encontrado`);
      return null;
    }
    
    // Obter informa√ß√µes do servidor atual
    const userServer = await storage.getUserServers(userId);
    if (!userServer || userServer.length === 0 || !userServer[0].server) {
      console.log(`‚ö†Ô∏è Servidor n√£o configurado para usu√°rio ${userId}`);
      return null;
    }
    
    const server = userServer[0].server;
    const instanceName = user.username; // Usa o nome do usu√°rio como inst√¢ncia
    
    // Verificar se temos as informa√ß√µes necess√°rias
    if (!server.apiUrl || !server.apiToken) {
      console.log(`‚ö†Ô∏è Configura√ß√£o de API incompleta para usu√°rio ${userId}`);
      return null;
    }
    
    // Configurar headers para a requisi√ß√£o usando o token do servidor
    const headers = {
      'Content-Type': 'application/json',
      'apikey': server.apiToken
    };
    
    try {
      const statusResponse = await axios.get(
        `${server.apiUrl}/instance/connectionState/${instanceName}`,
        { 
          headers,
          timeout: 10000 // 10 segundos de timeout
        }
      );
      
      // Verificar se est√° conectado corretamente
      const instanceState = statusResponse.data?.instance?.state || statusResponse.data?.state;
      const isConnected = instanceState === 'open' || 
                         instanceState === 'connected' || 
                         statusResponse.data?.connected === true ||
                         statusResponse.data?.instance?.connected === true;
      
      console.log(`üìä Usu√°rio ${userId} (${user.username}): ${isConnected ? 'CONECTADO' : 'DESCONECTADO'}`);
      return isConnected;
      
    } catch (apiError) {
      console.log(`‚ö†Ô∏è Erro ao verificar status da API para usu√°rio ${userId}: ${apiError.message}`);
      return null;
    }
    
  } catch (error) {
    console.error(`‚ùå Erro ao verificar conex√£o do usu√°rio ${userId}:`, error);
    return null;
  }
}

// Fun√ß√£o para processar mudan√ßa de estado e enviar webhook
async function processStateChange(userId: number, previousState: boolean | undefined, currentState: boolean) {
  const stateChanged = previousState !== undefined && previousState !== currentState;
  
  if (stateChanged) {
    console.log(`üîÑ MUDAN√áA DE ESTADO DETECTADA para usu√°rio ${userId}: ${previousState} ‚Üí ${currentState}`);
    
    if (!previousState && currentState) {
      // Estado mudou de desconectado para conectado - disparar webhook de conex√£o
      console.log(`üì§ Disparando webhook de CONEX√ÉO QR Code para usu√°rio ${userId}...`);
      try {
        const success = await sendQRConnectionWebhook(userId);
        if (success) {
          console.log(`‚úÖ Webhook de conex√£o enviado com sucesso para usu√°rio ${userId}`);
        } else {
          console.log(`‚ùå Falha no envio do webhook de conex√£o para usu√°rio ${userId}`);
        }
      } catch (webhookError) {
        console.error(`‚ùå Erro ao enviar webhook de conex√£o para usu√°rio ${userId}:`, webhookError);
      }
    } else if (previousState && !currentState) {
      // Estado mudou de conectado para desconectado - disparar webhook de desconex√£o
      console.log(`üì§ Disparando webhook de DESCONEX√ÉO QR Code para usu√°rio ${userId}...`);
      try {
        const success = await sendQRDisconnectionWebhook(userId);
        if (success) {
          console.log(`‚úÖ Webhook de desconex√£o enviado com sucesso para usu√°rio ${userId}`);
        } else {
          console.log(`‚ùå Falha no envio do webhook de desconex√£o para usu√°rio ${userId}`);
        }
      } catch (webhookError) {
        console.error(`‚ùå Erro ao enviar webhook de desconex√£o para usu√°rio ${userId}:`, webhookError);
      }
    }
  }
  
  // Atualizar estado no cache
  lastConnectionState[userId] = currentState;
}

// Fun√ß√£o para verificar todos os usu√°rios ativos
async function checkAllUserConnections() {
  try {
    console.log(`üîç [${new Date().toLocaleTimeString()}] Verificando conex√µes de todos os usu√°rios...`);
    
    // Buscar todos os usu√°rios ativos
    const users = await storage.getAllUsers();
    const activeUsers = users.filter(user => user.isActive !== false);
    
    console.log(`üìä Encontrados ${activeUsers.length} usu√°rios ativos para verifica√ß√£o`);
    
    // Verificar cada usu√°rio
    for (const user of activeUsers) {
      try {
        const previousState = lastConnectionState[user.id];
        const currentState = await checkUserConnectionStatus(user.id);
        
        if (currentState !== null) {
          await processStateChange(user.id, previousState, currentState);
        }
      } catch (userError) {
        console.error(`‚ùå Erro ao processar usu√°rio ${user.id}:`, userError);
      }
    }
    
    console.log(`‚úÖ Verifica√ß√£o conclu√≠da √†s ${new Date().toLocaleTimeString()}`);
    
  } catch (error) {
    console.error('‚ùå Erro geral no monitoramento de conex√µes:', error);
  }
}

// Intervalo de verifica√ß√£o (em milissegundos) - 30 segundos
const CHECK_INTERVAL = 30000;

let monitoringInterval: NodeJS.Timeout | null = null;

// Fun√ß√£o para iniciar o monitoramento autom√°tico
export function startConnectionMonitoring() {
  if (monitoringInterval) {
    console.log('‚ö†Ô∏è Monitoramento de conex√µes j√° est√° ativo');
    return;
  }
  
  console.log('üöÄ Iniciando monitoramento autom√°tico de conex√µes QR Code...');
  
  // Executar verifica√ß√£o inicial
  checkAllUserConnections();
  
  // Configurar verifica√ß√£o peri√≥dica
  monitoringInterval = setInterval(checkAllUserConnections, CHECK_INTERVAL);
  
  console.log(`‚úÖ Monitoramento iniciado - verificando a cada ${CHECK_INTERVAL/1000} segundos`);
}

// Fun√ß√£o para parar o monitoramento autom√°tico
export function stopConnectionMonitoring() {
  if (monitoringInterval) {
    clearInterval(monitoringInterval);
    monitoringInterval = null;
    console.log('üõë Monitoramento autom√°tico de conex√µes parado');
  }
}

// Fun√ß√£o para verificar status atual do monitoramento
export function getMonitoringStatus() {
  return {
    active: monitoringInterval !== null,
    interval: CHECK_INTERVAL,
    lastStates: { ...lastConnectionState }
  };
}

// Fun√ß√£o para for√ßar verifica√ß√£o manual
export async function forceConnectionCheck() {
  console.log('üîÑ For√ßando verifica√ß√£o manual de conex√µes...');
  await checkAllUserConnections();
}