#!/bin/bash

#################################################
# LigAI Dashboard - Diagn√≥stico PostgreSQL
# Verifica configura√ß√µes e problemas de conex√£o
#################################################

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

echo -e "${GREEN}LigAI Dashboard - Diagn√≥stico PostgreSQL${NC}"
echo "================================================"
echo

# Verificar se PostgreSQL est√° rodando
echo -e "${YELLOW}1. Status do PostgreSQL:${NC}"
if systemctl is-active --quiet postgresql; then
    echo -e "${GREEN}‚úÖ PostgreSQL est√° rodando${NC}"
else
    echo -e "${RED}‚ùå PostgreSQL N√ÉO est√° rodando${NC}"
    echo "Execute: sudo systemctl start postgresql"
    exit 1
fi

# Encontrar vers√£o do PostgreSQL
PG_VERSION=""
for version in 12 13 14 15 16; do
    if [[ -d "/etc/postgresql/$version" ]]; then
        PG_VERSION=$version
        break
    fi
done

if [[ -z "$PG_VERSION" ]]; then
    echo -e "${RED}‚ùå N√£o foi poss√≠vel encontrar a vers√£o do PostgreSQL${NC}"
    exit 1
fi

echo -e "üìã Vers√£o detectada: PostgreSQL $PG_VERSION"
echo

# Verificar se est√° escutando na porta
echo -e "${YELLOW}2. Portas de escuta:${NC}"
LISTENING=$(netstat -ln 2>/dev/null | grep ":5432" || ss -ln 2>/dev/null | grep ":5432")
if [[ -n "$LISTENING" ]]; then
    echo -e "${GREEN}‚úÖ PostgreSQL escutando na porta 5432${NC}"
    echo "$LISTENING"
    
    # Verificar se est√° escutando em todas as interfaces
    if echo "$LISTENING" | grep -q "0.0.0.0:5432\|:::5432"; then
        echo -e "${GREEN}‚úÖ Escutando em todas as interfaces (0.0.0.0)${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è Escutando apenas em localhost${NC}"
        echo -e "${RED}‚ùå PROBLEMA: PostgreSQL n√£o aceita conex√µes externas${NC}"
    fi
else
    echo -e "${RED}‚ùå PostgreSQL N√ÉO est√° escutando na porta 5432${NC}"
fi
echo

# Verificar configura√ß√£o postgresql.conf
PG_CONF="/etc/postgresql/$PG_VERSION/main/postgresql.conf"
echo -e "${YELLOW}3. Configura√ß√£o postgresql.conf:${NC}"
if [[ -f "$PG_CONF" ]]; then
    echo -e "üìÅ Arquivo: $PG_CONF"
    
    # Verificar listen_addresses
    LISTEN_ADDR=$(grep "^listen_addresses" "$PG_CONF" || echo "n√£o encontrado")
    echo -e "üîß listen_addresses: $LISTEN_ADDR"
    
    if echo "$LISTEN_ADDR" | grep -q "'\\*'"; then
        echo -e "${GREEN}‚úÖ Configurado para aceitar conex√µes externas${NC}"
    else
        echo -e "${RED}‚ùå N√ÉO configurado para conex√µes externas${NC}"
    fi
    
    # Verificar porta
    PORT_CONF=$(grep "^port" "$PG_CONF" || echo "padr√£o")
    echo -e "üîß port: $PORT_CONF"
else
    echo -e "${RED}‚ùå Arquivo postgresql.conf n√£o encontrado${NC}"
fi
echo

# Verificar pg_hba.conf
PG_HBA="/etc/postgresql/$PG_VERSION/main/pg_hba.conf"
echo -e "${YELLOW}4. Configura√ß√£o pg_hba.conf:${NC}"
if [[ -f "$PG_HBA" ]]; then
    echo -e "üìÅ Arquivo: $PG_HBA"
    
    # Verificar regras para ligai
    LIGAI_RULES=$(grep "ligai" "$PG_HBA" | grep -v "^#" || echo "nenhuma")
    echo -e "üîß Regras para usu√°rio 'ligai':"
    if [[ "$LIGAI_RULES" != "nenhuma" ]]; then
        echo "$LIGAI_RULES" | while read line; do
            echo -e "${GREEN}   ‚úÖ $line${NC}"
        done
    else
        echo -e "${RED}   ‚ùå Nenhuma regra encontrada para usu√°rio 'ligai'${NC}"
    fi
else
    echo -e "${RED}‚ùå Arquivo pg_hba.conf n√£o encontrado${NC}"
fi
echo

# Verificar firewall
echo -e "${YELLOW}5. Configura√ß√£o do Firewall:${NC}"
if command -v ufw >/dev/null; then
    UFW_STATUS=$(ufw status | grep "5432" || echo "porta 5432 n√£o encontrada")
    echo -e "üî• UFW Status:"
    echo "$UFW_STATUS"
    
    if echo "$UFW_STATUS" | grep -q "5432.*ALLOW"; then
        echo -e "${GREEN}‚úÖ Porta 5432 liberada no firewall${NC}"
    else
        echo -e "${RED}‚ùå Porta 5432 N√ÉO est√° liberada no firewall${NC}"
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è UFW n√£o encontrado${NC}"
fi
echo

# Verificar usu√°rio PostgreSQL
echo -e "${YELLOW}6. Usu√°rio PostgreSQL 'ligai':${NC}"
USER_EXISTS=$(sudo -u postgres psql -tAc "SELECT 1 FROM pg_roles WHERE rolname='ligai';" 2>/dev/null || echo "erro")
if [[ "$USER_EXISTS" == "1" ]]; then
    echo -e "${GREEN}‚úÖ Usu√°rio 'ligai' existe${NC}"
    
    # Verificar permiss√µes
    USER_PERMS=$(sudo -u postgres psql -tAc "SELECT rolcreatedb, rolsuper FROM pg_roles WHERE rolname='ligai';" 2>/dev/null || echo "erro")
    echo -e "üîß Permiss√µes: $USER_PERMS"
else
    echo -e "${RED}‚ùå Usu√°rio 'ligai' N√ÉO existe${NC}"
fi
echo

# Verificar database
echo -e "${YELLOW}7. Database 'ligai':${NC}"
DB_EXISTS=$(sudo -u postgres psql -tAc "SELECT 1 FROM pg_database WHERE datname='ligai';" 2>/dev/null || echo "erro")
if [[ "$DB_EXISTS" == "1" ]]; then
    echo -e "${GREEN}‚úÖ Database 'ligai' existe${NC}"
else
    echo -e "${RED}‚ùå Database 'ligai' N√ÉO existe${NC}"
fi
echo

# Teste de conex√£o local
echo -e "${YELLOW}8. Teste de Conex√£o:${NC}"
echo -e "üîß Testando conex√£o local..."

# Tentar conex√£o sem senha (confian√ßa)
LOCAL_TEST=$(sudo -u postgres psql -h localhost -U ligai -d ligai -c "SELECT 1;" 2>&1 || echo "falhou")
if echo "$LOCAL_TEST" | grep -q "1"; then
    echo -e "${GREEN}‚úÖ Conex√£o local funcionando${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è Conex√£o local requer senha${NC}"
    echo "$LOCAL_TEST" | head -2
fi

echo
echo -e "${GREEN}==================== RESUMO ====================${NC}"
echo

# Detectar principais problemas
PROBLEMS=0

if ! echo "$LISTENING" | grep -q "0.0.0.0:5432\|:::5432"; then
    echo -e "${RED}‚ùå PROBLEMA 1: PostgreSQL n√£o aceita conex√µes externas${NC}"
    echo -e "   Solu√ß√£o: Configurar listen_addresses = '*' em postgresql.conf"
    ((PROBLEMS++))
fi

if ! grep -q "ligai" "$PG_HBA" 2>/dev/null; then
    echo -e "${RED}‚ùå PROBLEMA 2: Sem regras de acesso para usu√°rio 'ligai'${NC}"
    echo -e "   Solu√ß√£o: Adicionar regras em pg_hba.conf"
    ((PROBLEMS++))
fi

if ! ufw status 2>/dev/null | grep -q "5432.*ALLOW"; then
    echo -e "${RED}‚ùå PROBLEMA 3: Firewall bloqueando porta 5432${NC}"
    echo -e "   Solu√ß√£o: ufw allow 5432"
    ((PROBLEMS++))
fi

if [[ "$PROBLEMS" -eq 0 ]]; then
    echo -e "${GREEN}üéâ Configura√ß√£o parece estar correta!${NC}"
    echo -e "${YELLOW}Se ainda n√£o consegue conectar:${NC}"
    echo "‚Ä¢ Aguarde 1-2 minutos ap√≥s mudan√ßas"
    echo "‚Ä¢ Verifique firewall do seu computador local"
    echo "‚Ä¢ Use SSL Mode: 'Disable' no PGAdmin"
    echo "‚Ä¢ Teste com outro cliente (DBeaver, psql)"
else
    echo -e "${RED}üîß Execute: sudo bash configure-postgresql-external.sh${NC}"
fi

echo
echo -e "${YELLOW}Para aplicar corre√ß√µes automaticamente:${NC}"
echo -e "${GREEN}sudo bash configure-postgresql-external.sh${NC}"